!pip install split-folders
import splitfolders

splitfolders.ratio("/content/drive/MyDrive/facepalsy_image_dataset", # The location of dataset
                   output="/content/drive/MyDrive/DIR_SYS_FP_DATASET", # The output location
                   seed=42, # The number of seed
                   ratio=(.7, .15, .15), # The ratio of splited dataset
                   group_prefix=None, # If your dataset contains more than one file like ".jpg", ".pdf", etc
                   move=False # If you choose to move, turn this into True
                   )
                   
 ****************************************************/////////////////////////////////////////////*************************************************************
                                Code For Read Dataset From Using list Directories, Store With label and pixele array in Dictionary 
 ****************************************************/////////////////////////////////////////////*************************************************************
                   
#from datasets.features.features import Value
! pip install datasets transformers
import os
import datasets
import numpy as np
from PIL import Image
from numpy import asarray 

def create_image_folder_dataset(root_path):
  """creates `Dataset` from image folder structure"""
  
  # get class names by folders names
  _CLASS_NAMES= os.listdir(root_path)
  # defines `datasets` features`
  features=datasets.Features({
                      "img": datasets.Image(),
                      "label": datasets.features.ClassLabel(names=_CLASS_NAMES),
                    # "img_array":  datasets.Image()
                  })
  # temp list holding datapoints for creation
   img_data_files=[]
  label_data_files=[]
 # img_data_pexelval=[]

  # load images into list for creation
  for img_class in os.listdir(root_path):
    for img in os.listdir(os.path.join(root_path,img_class)):
      path_=os.path.join(root_path,img_class,img)
      img_data_files.append(path_)
      label_data_files.append(img_class)
     # img_data_pexelval.append(asarray(Image.open(path_)) )
  # create dataset
  ds = datasets.Dataset.from_dict({"img":img_data_files,"label":label_data_files  },features=features)#,"img_array": img_data_pexelval
  return ds
  
  
  
  #CALL THE MEHOND 
  train_ds = create_image_folder_dataset("/content/drive/MyDrive/DIR_SYS_FP_DATASET/train") 
  
 ****************************************************/////////////////////////////////////////////*************************************************************
                                                                          END  
 ****************************************************/////////////////////////////////////////////*************************************************************
         
  
****************************************************/////////////////////////////////////////////*************************************************************
                                return x_train,y_train ,x_test, y_test in numpy.ndym dataset 
****************************************************/////////////////////////////////////////////*************************************************************
# funtion return a number aganst  directory labe.
def find_number_label (classname,rootpath): 
        images_class = os.listdir(rootpath)
        for count, name in enumerate(images_class):
            if name == classname: 
                return count
                
                
def read_dataset_minist_fashion(rootpath):
    img_data_files=[]
    label_data_files=[]
    for images_class in os.listdir(rootpath):
        for images in os.listdir(os.path.join(rootpath,images_class)):
            image=os.path.join(rootpath,images_class,images)
            img = cv2.imread(image, cv2.IMREAD_GRAYSCALE)
            img = cv2.resize(img, (96, 96), interpolation=cv2.INTER_CUBIC)
            img = cv2.normalize(img, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)
            img_data_files.append(img)
            label_data_files.append(find_number_label(images_class,rootpath))
            #plt.imshow(img)
            #plt.title(find_number_label(images_class,rootpath))
            #plt.show()
    x_train = np.array(img_data_files)  
    y_train = np.array(label_data_files)
    return x_train, y_train
    
    
x_train, y_train=read_dataset_minist_fashion('/content/drive/MyDrive/Six_class_FacialPalsy/train')
x_test, y_test=read_dataset_minist_fashion('/content/drive/MyDrive/Six_class_FacialPalsy/test')

****************************************************/////////////////////////////////////////////*************************************************************
                                                                          END  
 ****************************************************/////////////////////////////////////////////*************************************************************
   
